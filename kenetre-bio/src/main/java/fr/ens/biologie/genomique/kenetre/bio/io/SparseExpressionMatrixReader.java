package fr.ens.biologie.genomique.kenetre.bio.io;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import java.util.Objects;

import com.google.common.base.Splitter;

import fr.ens.biologie.genomique.kenetre.bio.DenseExpressionMatrix;
import fr.ens.biologie.genomique.kenetre.bio.ExpressionMatrix;
import fr.ens.biologie.genomique.kenetre.io.FileUtils;
import fr.ens.biologie.genomique.kenetre.util.GuavaCompatibility;

/**
 * This class define an ExpressionMatrix reader for sparse matrix generated by
 * UMI-tools.
 * @author Laurent Jourdren
 * @since 2.0
 */
public class SparseExpressionMatrixReader implements ExpressionMatrixReader {

  private final InputStream is;

  @Override
  public ExpressionMatrix read() throws IOException {

    // TODO Create a Factory for ExpressionMatrix with newMatrix() for the
    // default one
    return read(new DenseExpressionMatrix());
  }

  @Override
  public ExpressionMatrix read(ExpressionMatrix matrix) throws IOException {

    Objects.requireNonNull(matrix, "matrix argument cannot be null");

    String line;
    boolean first = true;
    Splitter splitter = Splitter.on('\t');
    int lineCount = 0;

    try (BufferedReader reader = FileUtils.createBufferedReader(this.is)) {
      while ((line = reader.readLine()) != null) {

        line = line.trim();
        lineCount++;

        if (line.isEmpty() || line.startsWith("#")) {
          continue;
        }

        if (first) {

          if (!"gene\tcell\tcount".equals(line.trim().toLowerCase())) {
            throw new IOException("Invalid header: " + line);
          }
          first = false;
          continue;
        }

        List<String> fields = GuavaCompatibility.splitToList(splitter, line);

        if (fields.size() != 3) {
          throw new IOException("Invalid field count ("
              + fields.size() + ") at line " + lineCount
              + ", expected 3 fields: " + line);
        }

        try {
          matrix.setValue(fields.get(0), fields.get(1),
              Integer.parseInt(fields.get(2)));
        } catch (NumberFormatException e) {
          throw new IOException(
              "Invalid count at line " + lineCount + ": " + line);
        }
      }
    }

    return matrix;
  }

  @Override
  public void close() throws IOException {

    this.is.close();
  }

  //
  // Constructors
  //

  /**
   * Public constructor
   * @param is InputStream to use
   */
  public SparseExpressionMatrixReader(final InputStream is) {

    Objects.requireNonNull(is, "is argument cannot be null");

    this.is = is;
  }

  /**
   * Public constructor
   * @param file File to use
   * @throws FileNotFoundException if the file does not exists
   */
  public SparseExpressionMatrixReader(final File file)
      throws FileNotFoundException {

    Objects.requireNonNull(file, "file argument cannot be null");

    this.is = new FileInputStream(file);
  }

  /**
   * Public constructor.
   * @param filename File to use
   * @throws FileNotFoundException if the file does not exists
   */
  public SparseExpressionMatrixReader(final String filename)
      throws FileNotFoundException {

    Objects.requireNonNull(filename, "filename argument cannot be null");

    this.is = new FileInputStream(filename);

  }

}
